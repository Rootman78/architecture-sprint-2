name: sharding-repl-cache
services:
  #mongodb1:
  #  container_name: mongodb1
  #  image: dh-mirror.gitverse.ru/mongo:4.4
  #  volumes:
  #    - mongodb1_data_container:/data/db
  configSrv:
    image: dh-mirror.gitverse.ru/mongo:4.4
    container_name: configSrv 
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.100
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  #запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ] 
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #1-й шард - Реплика 1
  shard1-replica1:
    image: dh-mirror.gitverse.ru/mongo:4.4
    container_name: shard1-replica1
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.90
    volumes:
      - shard1-data-replica1:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      
  #1-й шард - Реплика 2
  shard1-replica2:
    image: dh-mirror.gitverse.ru/mongo:4.4
    container_name: shard1-replica2
    restart: always
    ports:
      - "27028:27028"
    networks:
      app-network:
        ipv4_address: 173.17.0.91
    volumes:
      - shard1-data-replica2:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27028"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      
  #1-й шард - Реплика 3
  shard1-replica3:
    image: dh-mirror.gitverse.ru/mongo:4.4
    container_name: shard1-replica3
    restart: always
    ports:
      - "27038:27038"
    networks:
      app-network:
        ipv4_address: 173.17.0.93
    volumes:
      - shard1-data-replica3:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27038"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #2-й шард - Реплика 1
  shard2-replica1:
    image: dh-mirror.gitverse.ru/mongo:4.4
    container_name: shard2-replica1
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.80
    volumes:
      - shard2-data-replica1:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
        
  #2-й шард - Реплика 2
  shard2-replica2:
    image: dh-mirror.gitverse.ru/mongo:4.4
    container_name: shard2-replica2
    restart: always
    ports:
      - "27029:27029"
    networks:
      app-network:
        ipv4_address: 173.17.0.81
    volumes:
      - shard2-data-replica2:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27029"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      
  #2-й шард - Реплика 3
  shard2-replica3:
    image: dh-mirror.gitverse.ru/mongo:4.4
    container_name: shard2-replica3
    restart: always
    ports:
      - "27039:27039"
    networks:
      app-network:
        ipv4_address: 173.17.0.82
    volumes:
      - shard2-data-replica3:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27039"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  #роутер
  mongos_router:
    image: dh-mirror.gitverse.ru/mongo:4.4
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.70
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb", 
        "config_server/configSrv:27017", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      
  # Redis
  redis_single:
    image: redis:latest
    container_name: redis_single
    restart: always
    ports:
      - "6379:6379"
    networks:
      app-network:
        ipv4_address: 173.17.0.50
    volumes:
      - redis-data:/data



  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
      - redis_single
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.60 

    environment:
      #MONGODB_URL: "mongodb://mongodb1"
      MONGODB_URL: "mongodb://mongos_router:27020/somedb"      
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis_single:6379"
      
networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16


volumes:
  #mongodb1_data_container:
  config-data:
  shard1-data-replica1:
  shard1-data-replica2: 
  shard1-data-replica3: 
  shard2-data-replica1: 
  shard2-data-replica2: 
  shard2-data-replica3:
  redis-data: